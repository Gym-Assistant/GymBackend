// <auto-generated />
using System;
using GymBackend.Domain.Workouts;
using GymBackend.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GymBackend.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230511042759_RemovedIsDefaultFoodCharacteristic")]
    partial class RemovedIsDefaultFoodCharacteristic
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseMealFoodElementary", b =>
                {
                    b.Property<Guid>("ConsumedFoodElementariesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseMealsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsumedFoodElementariesId", "CourseMealsId");

                    b.HasIndex("CourseMealsId");

                    b.ToTable("CourseMealFoodElementary", (string)null);
                });

            modelBuilder.Entity("CourseMealFoodRecipe", b =>
                {
                    b.Property<Guid>("ConsumedFoodRecipesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseMealsId")
                        .HasColumnType("uuid");

                    b.HasKey("ConsumedFoodRecipesId", "CourseMealsId");

                    b.HasIndex("CourseMealsId");

                    b.ToTable("CourseMealFoodRecipe", (string)null);
                });

            modelBuilder.Entity("ExerciseWorkout", b =>
                {
                    b.Property<Guid>("ExercisesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkoutsId")
                        .HasColumnType("uuid");

                    b.HasKey("ExercisesId", "WorkoutsId");

                    b.HasIndex("WorkoutsId");

                    b.ToTable("WorkoutExercises", (string)null);
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.ConsumedElementaryWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseMealId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodElementaryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CourseMealId");

                    b.HasIndex("FoodElementaryId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsumedElementaryWeights");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.ConsumedRecipeWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseMealId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodRecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CourseMealId");

                    b.HasIndex("FoodRecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsumedRecipeWeights");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodElementaryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicTypeId");

                    b.HasIndex("FoodElementaryId");

                    b.HasIndex("UserId");

                    b.ToTable("FoodCharacteristics");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodCharacteristicType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FoodCharacteristicTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0141a646-e0ce-4f7a-9433-97112f05db0f"),
                            IsDefault = true,
                            Name = "Белки"
                        },
                        new
                        {
                            Id = new Guid("d126d15b-853a-4b7e-b122-af811a160609"),
                            IsDefault = true,
                            Name = "Жиры"
                        },
                        new
                        {
                            Id = new Guid("e3c6d689-4f63-44ff-8844-5bd11e4ed5af"),
                            IsDefault = true,
                            Name = "Углеводы"
                        },
                        new
                        {
                            Id = new Guid("cdcc58c7-5c5f-454a-9728-0643afccf491"),
                            IsDefault = true,
                            Name = "Калории"
                        });
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodElementary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FoodElementaries");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodElementaryWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodElementaryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodRecipeId")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FoodElementaryId");

                    b.HasIndex("FoodRecipeId");

                    b.ToTable("FoodElementaryWeights");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FoodRecipes");
                });

            modelBuilder.Entity("FoodBackend.Domain.MealStuffs.CourseMeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseMealDayId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("CreatedAt")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("MealTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseMealDayId");

                    b.HasIndex("MealTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseMeals");
                });

            modelBuilder.Entity("FoodBackend.Domain.MealStuffs.CourseMealDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CourseMealDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CourseMealDays");
                });

            modelBuilder.Entity("FoodBackend.Domain.MealStuffs.MealType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MealTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d0b4a4f-aa3f-464c-94b5-6f0a16e4e340"),
                            IsDefault = true,
                            Name = "Завтрак"
                        },
                        new
                        {
                            Id = new Guid("78f0b796-31f9-4b37-ad80-8ceed73978b2"),
                            IsDefault = true,
                            Name = "Обед"
                        },
                        new
                        {
                            Id = new Guid("82ed6910-2828-4631-bd09-bfb3a29e27b3"),
                            IsDefault = true,
                            Name = "Ужин"
                        });
                });

            modelBuilder.Entity("FoodElementaryFoodRecipe", b =>
                {
                    b.Property<Guid>("FoodRecipesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uuid");

                    b.HasKey("FoodRecipesId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("FoodRecipeFoodElementary", (string)null);
                });

            modelBuilder.Entity("GymBackend.Domain.Users.AppIdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("GymBackend.Domain.Users.CharacteristicStamp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserCharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserCharacteristicId");

                    b.ToTable("CharacteristicStamps");
                });

            modelBuilder.Entity("GymBackend.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastTokenResetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GymBackend.Domain.Users.UserCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCharacteristics");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkoutTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.Sets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainSessionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TrainSessionId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.TrainSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("TrainSessions");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.WorkoutPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("WorkoutPackages");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.WorkoutTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("WorkoutPackageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WorkoutPackageId");

                    b.ToTable("WorkoutTemplates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourseMealFoodElementary", b =>
                {
                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodElementary", null)
                        .WithMany()
                        .HasForeignKey("ConsumedFoodElementariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBackend.Domain.MealStuffs.CourseMeal", null)
                        .WithMany()
                        .HasForeignKey("CourseMealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseMealFoodRecipe", b =>
                {
                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodRecipe", null)
                        .WithMany()
                        .HasForeignKey("ConsumedFoodRecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBackend.Domain.MealStuffs.CourseMeal", null)
                        .WithMany()
                        .HasForeignKey("CourseMealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseWorkout", b =>
                {
                    b.HasOne("GymBackend.Domain.Workouts.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Workouts.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.ConsumedElementaryWeight", b =>
                {
                    b.HasOne("FoodBackend.Domain.MealStuffs.CourseMeal", "CourseMeal")
                        .WithMany("ConsumedElementaryWeights")
                        .HasForeignKey("CourseMealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodElementary", "FoodElementary")
                        .WithMany()
                        .HasForeignKey("FoodElementaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseMeal");

                    b.Navigation("FoodElementary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.ConsumedRecipeWeight", b =>
                {
                    b.HasOne("FoodBackend.Domain.MealStuffs.CourseMeal", "CourseMeal")
                        .WithMany("ConsumedRecipeWeights")
                        .HasForeignKey("CourseMealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodRecipe", "FoodRecipe")
                        .WithMany()
                        .HasForeignKey("FoodRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseMeal");

                    b.Navigation("FoodRecipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodCharacteristic", b =>
                {
                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodCharacteristicType", "CharacteristicType")
                        .WithMany()
                        .HasForeignKey("CharacteristicTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodElementary", "FoodElementary")
                        .WithMany("Characteristics")
                        .HasForeignKey("FoodElementaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CharacteristicType");

                    b.Navigation("FoodElementary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodCharacteristicType", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodElementary", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodElementaryWeight", b =>
                {
                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodElementary", "FoodElementary")
                        .WithMany()
                        .HasForeignKey("FoodElementaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodRecipe", "FoodRecipe")
                        .WithMany("IngredientWeights")
                        .HasForeignKey("FoodRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodElementary");

                    b.Navigation("FoodRecipe");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodRecipe", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodBackend.Domain.MealStuffs.CourseMeal", b =>
                {
                    b.HasOne("FoodBackend.Domain.MealStuffs.CourseMealDay", "CourseMealDay")
                        .WithMany("CourseMeals")
                        .HasForeignKey("CourseMealDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBackend.Domain.MealStuffs.MealType", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseMealDay");

                    b.Navigation("MealType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodBackend.Domain.MealStuffs.CourseMealDay", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodBackend.Domain.MealStuffs.MealType", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodElementaryFoodRecipe", b =>
                {
                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodRecipe", null)
                        .WithMany()
                        .HasForeignKey("FoodRecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBackend.Domain.Foodstuffs.FoodElementary", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymBackend.Domain.Users.CharacteristicStamp", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.UserCharacteristic", "UserCharacteristic")
                        .WithMany("Values")
                        .HasForeignKey("UserCharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCharacteristic");
                });

            modelBuilder.Entity("GymBackend.Domain.Users.UserCharacteristic", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "User")
                        .WithMany("Characteristics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.Exercise", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Workouts.WorkoutTemplate", null)
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutTemplateId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.Sets", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Workouts.TrainSession", "TrainSession")
                        .WithMany("Sets")
                        .HasForeignKey("TrainSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("TrainSession");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.TrainSession", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Workouts.Exercise", "Exercise")
                        .WithMany("TrainSessions")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Workouts.Workout", "Workout")
                        .WithMany("TrainSessions")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.Workout", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.WorkoutPackage", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.WorkoutTemplate", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Workouts.WorkoutPackage", null)
                        .WithMany("WorkoutTemplates")
                        .HasForeignKey("WorkoutPackageId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.AppIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymBackend.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GymBackend.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodElementary", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("FoodBackend.Domain.Foodstuffs.FoodRecipe", b =>
                {
                    b.Navigation("IngredientWeights");
                });

            modelBuilder.Entity("FoodBackend.Domain.MealStuffs.CourseMeal", b =>
                {
                    b.Navigation("ConsumedElementaryWeights");

                    b.Navigation("ConsumedRecipeWeights");
                });

            modelBuilder.Entity("FoodBackend.Domain.MealStuffs.CourseMealDay", b =>
                {
                    b.Navigation("CourseMeals");
                });

            modelBuilder.Entity("GymBackend.Domain.Users.User", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("GymBackend.Domain.Users.UserCharacteristic", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.Exercise", b =>
                {
                    b.Navigation("TrainSessions");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.TrainSession", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.Workout", b =>
                {
                    b.Navigation("TrainSessions");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.WorkoutPackage", b =>
                {
                    b.Navigation("WorkoutTemplates");
                });

            modelBuilder.Entity("GymBackend.Domain.Workouts.WorkoutTemplate", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
